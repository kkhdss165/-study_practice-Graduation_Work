import cv2
import dlib
import numpy as np
import copy
detector = dlib.get_frontal_face_detector()
predictor = dlib.shape_predictor('../models/shape_predictor_68_face_landmarks.dat')

JAMLINE_RANGE = list(range(0,17))          #0~16
RIGHT_EYEBROW_RANGE = list(range(17,22))   #17~21
LEFT_EYEBROW_RANGE = list(range(22,27))    #22~26
NOSE_RANGE = list(range(27,36))            #27~35
NOSE_ECT_RANGE = [27,31,32,33,34,35]        #코 외각
RIGHT_EYE_RANGE = list(range(36,42))       #36~41
LEFT_EYE_RANGE = list(range(42,48))        #42~47
MOUSE_OUTLINE_RANGE = list(range(48,60))   #18~60
MOUSE_INLINE_RANGE = list(range(60,68))    #61~67

# 가공처리 전
JAMLINE_POINTS = []
RIGHT_EYEBROW_POINTS = []
LEFT_EYEBROW_POINTS = []
NOSE_POINTS = []
NOSE_ECT_POINTS = []
RIGHT_EYE_POINTS = []
LEFT_EYE_POINTS = []
MOUSE_OUTLINE_POINTS = []
MOUSE_INLINE_POINTS = []

#가공 처리 후
AFTER_JAMLINE_POINTS = []
AFTER_RIGHT_EYEBROW_POINTS = []
AFTER_LEFT_EYEBROW_POINTS = []
AFTER_NOSE_POINTS = []
AFTER_NOSE_ECT_POINTS = []
AFTER_RIGHT_EYE_POINTS = []
AFTER_LEFT_EYE_POINTS = []
AFTER_MOUSE_OUTLINE_POINTS = []
AFTER_MOUSE_INLINE_POINTS = []

img = cv2.imread('../img/hyunbin.png')
#img = cv2.imread('./img/sangsoo.png')
#img = cv2.imread('./img/sukhun.png')
#img = cv2.imread('./img/jungmin.png')
img_hsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)
cv2.imshow('img', img)
gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
mask_skin = np.zeros_like(img)

faces = detector(gray)
def construct():
    for rect in faces:

        x, y = rect.left(), rect.top()
        w, h = rect.right() - x, rect.bottom() - y
        # cv2.rectangle(img, (x,y), (x+w, x+h),(0,255,0),1)

        shape = predictor(gray, rect)
        for i in JAMLINE_RANGE:
            part = shape.part(i)
            JAMLINE_POINTS.append((part.x, part.y))

        for i in RIGHT_EYEBROW_RANGE:
            part = shape.part(i)
            RIGHT_EYEBROW_POINTS.append((part.x, part.y))

        for i in LEFT_EYEBROW_RANGE:
            part = shape.part(i)
            LEFT_EYEBROW_POINTS.append((part.x, part.y))

        # nose
        for i in NOSE_RANGE:
            part = shape.part(i)
            NOSE_POINTS.append((part.x, part.y))

        for i in RIGHT_EYE_RANGE:
            part = shape.part(i)
            RIGHT_EYE_POINTS.append((part.x, part.y))

        for i in LEFT_EYE_RANGE:
            part = shape.part(i)
            LEFT_EYE_POINTS.append((part.x, part.y))

        for i in MOUSE_OUTLINE_RANGE:
            part = shape.part(i)
            MOUSE_OUTLINE_POINTS.append((part.x, part.y))

        for i in MOUSE_INLINE_RANGE:
            part = shape.part(i)
            MOUSE_INLINE_POINTS.append((part.x, part.y))


def skin_mask():
    for rect in faces:

        x, y = rect.left(), rect.top()
        w, h = rect.right() - x, rect.bottom() - y
        # cv2.rectangle(img, (x,y), (x+w, x+h),(0,255,0),1)

        shape = predictor(gray, rect)

        for i in JAMLINE_RANGE:
            part = shape.part(i)
            JAMLINE_POINTS.append((part.x, part.y))

        cv2.fillPoly(mask_skin, [np.array(JAMLINE_POINTS, dtype=np.int32)], (255,255,255))

        for i in RIGHT_EYEBROW_RANGE:
            part = shape.part(i)
            RIGHT_EYEBROW_POINTS.append((part.x, part.y))

        cv2.fillPoly(mask_skin, [np.array(RIGHT_EYEBROW_POINTS, dtype=np.int32)], (0,0,0))

        for i in LEFT_EYEBROW_RANGE:
            part = shape.part(i)
            LEFT_EYEBROW_POINTS.append((part.x, part.y))

        cv2.fillPoly(mask_skin, [np.array(LEFT_EYEBROW_POINTS, dtype=np.int32)], (0,0,0))

        # nose
        for i in NOSE_ECT_RANGE:
            part = shape.part(i)
            NOSE_ECT_POINTS.append((part.x, part.y))

        cv2.fillPoly(mask_skin, [np.array(NOSE_ECT_POINTS, dtype=np.int32)], (0,0,0))

        for i in RIGHT_EYE_RANGE:
            part = shape.part(i)
            RIGHT_EYE_POINTS.append((part.x, part.y))

        cv2.fillPoly(mask_skin, [np.array(RIGHT_EYE_POINTS, dtype=np.int32)], (0,0,0))

        for i in LEFT_EYE_RANGE:
            part = shape.part(i)
            LEFT_EYE_POINTS.append((part.x, part.y))

        cv2.fillPoly(mask_skin, [np.array(LEFT_EYE_POINTS, dtype=np.int32)], (0,0,0))

        for i in MOUSE_OUTLINE_RANGE:
            part = shape.part(i)
            MOUSE_OUTLINE_POINTS.append((part.x, part.y))

        cv2.fillPoly(mask_skin, [np.array(MOUSE_OUTLINE_POINTS, dtype=np.int32)], (0,0,0))

    masked_skin = cv2.bitwise_and(img, mask_skin)
    cv2.imshow('masked', masked_skin)

    img_temp = masked_skin.copy()

    K = 10

    data = img_temp.reshape((-1, 3)).astype(np.float32)

    criteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 10, 1.0)

    ret, label, center = cv2.kmeans(data, K, None, criteria, 10, cv2.KMEANS_RANDOM_CENTERS)
    center = np.uint8(center)
    print(center)
    # 각 레이블에 해당하는 중심값으로 픽셀 값 선택 ---⑥
    res = center[label.flatten()]
    # 원본 영상의 형태로 변환 ---⑦
    res = res.reshape((img_temp.shape))
    # 결과 출력 ---⑧
    cv2.imshow('KMeans Color', res)
    cv2.waitKey(0)
    cv2.destroyAllWindows()

    hsv_roi = cv2.cvtColor(res, cv2.COLOR_BGR2HSV)

    hist_roi = cv2.calcHist([hsv_roi], [0, 1], None, [180, 256], [0, 180, 0, 256])

    bp = cv2.calcBackProject([img_hsv], [0, 1], hist_roi, [0, 180, 0, 256], 1)

    disc = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (5, 5))
    cv2.filter2D(bp, -1, disc, bp)
    _, mask = cv2.threshold(bp, 1, 255, cv2.THRESH_BINARY)
    result = cv2.bitwise_and(img, img, mask=mask)
    cv2.imshow('result manual', result)



    cv2.waitKey()
    cv2.destroyAllWindows()

def print_Poly():

    img_copy = copy.deepcopy(img)

    cv2.polylines(img_copy, [np.array(JAMLINE_POINTS, dtype=np.int32)], False, (0, 0, 0), 1)
    cv2.polylines(img_copy, [np.array(RIGHT_EYEBROW_POINTS, dtype=np.int32)], True, (255, 0, 0), 1)
    cv2.polylines(img_copy, [np.array(LEFT_EYEBROW_POINTS, dtype=np.int32)], True, (255, 0, 0), 1)
    cv2.polylines(img_copy, [np.array(NOSE_POINTS, dtype=np.int32)], True, (0, 255, 0), 1)
    cv2.polylines(img_copy, [np.array(RIGHT_EYE_POINTS, dtype=np.int32)], True, (0, 255, 0), 1)
    cv2.polylines(img_copy, [np.array(LEFT_EYE_POINTS, dtype=np.int32)], True, (0, 255, 0), 1)
    cv2.polylines(img_copy, [np.array(MOUSE_OUTLINE_POINTS, dtype=np.int32)], True, (0, 255, 0), 1)
    cv2.polylines(img_copy, [np.array(MOUSE_INLINE_POINTS, dtype=np.int32)], True, (0, 255, 0), 1)

    cv2.imshow('print_Poly()', img_copy)
    cv2.waitKey()
    cv2.destroyAllWindows()

def print_Point():

    img_copy = copy.deepcopy(img)

    for rect in faces:

        x, y = rect.left(), rect.top()
        w, h = rect.right() - x, rect.bottom() - y
        # cv2.rectangle(img, (x,y), (x+w, x+h),(0,255,0),1)

        shape = predictor(gray, rect)
        for i in range(68):
            part = shape.part(i)
            cv2.circle(img_copy, (part.x, part.y), 2 , (0,0,255), -1)
            cv2.putText(img_copy, str(i), (part.x, part.y), cv2.FONT_HERSHEY_PLAIN, 0.5, (255,255,255), 1 , cv2.LINE_AA)

    cv2.imshow('print_Point', img_copy)
    cv2.waitKey()
    cv2.destroyAllWindows()

def create_new_faceline():
    new_line = copy.deepcopy(JAMLINE_POINTS)
    for i in range(6):
        new_line[i] = (int((new_line[i][0] + RIGHT_EYEBROW_POINTS[0][0])/2), new_line[i][1])
        new_line[-(i+1)] = (int((new_line[-(i+1)][0] + LEFT_EYEBROW_POINTS[-1][0])/2), new_line[-(i+1)][1])

    for i in new_line:
        cv2.circle(img, (i[0], i[1]), 2, (0, 0, 255), -1)



    cv2.imshow('img3', img)
    cv2.waitKey()
    cv2.destroyAllWindows()

#점들 대칭 처리
def processing_Point():
    
    #얼굴라인 처리
    Radius = abs(JAMLINE_POINTS[0][0] - JAMLINE_POINTS[16][0]) / 2
    mid_x = (JAMLINE_POINTS[0][0] + JAMLINE_POINTS[16][0] + JAMLINE_POINTS[8][0]) / 3
    AFTER_JAMLINE_POINTS = copy.deepcopy(JAMLINE_POINTS)

    for i in range(int(len(JAMLINE_POINTS) / 2)):
        len_x = (JAMLINE_POINTS[-(i + 1)][0] - JAMLINE_POINTS[i][0]) / 2
        mid_y = (JAMLINE_POINTS[-(i + 1)][1] + JAMLINE_POINTS[i][1]) / 2

        AFTER_JAMLINE_POINTS[i] = (mid_x - len_x, mid_y)
        AFTER_JAMLINE_POINTS[-(i + 1)] = (mid_x + len_x, mid_y)

    AFTER_JAMLINE_POINTS[8] = (mid_x, JAMLINE_POINTS[8][1])

    Height = AFTER_JAMLINE_POINTS[8][1] - AFTER_JAMLINE_POINTS[0][1]
    center = (AFTER_JAMLINE_POINTS[8][0], AFTER_JAMLINE_POINTS[0][1])

    #눈썹 처리
    AFTER_RIGHT_EYEBROW_POINTS = copy.deepcopy(RIGHT_EYEBROW_POINTS)
    AFTER_LEFT_EYEBROW_POINTS = copy.deepcopy(LEFT_EYEBROW_POINTS)

    for i in range(len(RIGHT_EYEBROW_POINTS)):
        len_x = (LEFT_EYEBROW_POINTS[-(i + 1)][0] - RIGHT_EYEBROW_POINTS[i][0]) / 2
        mid_y = (LEFT_EYEBROW_POINTS[-(i + 1)][1] + RIGHT_EYEBROW_POINTS[i][1]) / 2

        AFTER_RIGHT_EYEBROW_POINTS[i] = (mid_x - len_x, mid_y)
        AFTER_LEFT_EYEBROW_POINTS[-(i+1)] = (mid_x + len_x, mid_y)

    #코 처리

    #눈 처리
    AFTER_RIGHT_EYE_POINTS = copy.deepcopy(RIGHT_EYE_POINTS)
    AFTER_LEFT_EYE_POINTS = copy.deepcopy(LEFT_EYE_POINTS)

    for i in range(len(RIGHT_EYE_POINTS)):
        len_x = (LEFT_EYE_POINTS[-(i + 1)][0] - RIGHT_EYE_POINTS[i][0]) / 2
        mid_y = (LEFT_EYE_POINTS[-(i + 1)][1] + RIGHT_EYE_POINTS[i][1]) / 2

        AFTER_RIGHT_EYE_POINTS[i] = (mid_x - len_x, mid_y)
        AFTER_LEFT_EYE_POINTS[-(i+1)] = (mid_x + len_x, mid_y)

    #입 처리
    AFTER_MOUSE_OUTLINE_POINTS = copy.deepcopy(MOUSE_OUTLINE_POINTS)
    AFTER_MOUSE_INLINE_POINTS = copy.deepcopy(MOUSE_INLINE_POINTS)
    #외각
    for i in range(3):

        len_x = (MOUSE_OUTLINE_POINTS[6-i][0] - MOUSE_OUTLINE_POINTS[i][0]) /2
        mid_y = (MOUSE_OUTLINE_POINTS[6-i][1] + MOUSE_OUTLINE_POINTS[i][1]) /2

        AFTER_MOUSE_OUTLINE_POINTS[i] = (mid_x - len_x, mid_y)
        AFTER_MOUSE_OUTLINE_POINTS[6-i] = (mid_x + len_x, mid_y)

        if i > 0:
            len_x_down = (MOUSE_OUTLINE_POINTS[i+6][0] - MOUSE_OUTLINE_POINTS[12-i][0]) /2
            mid_y_down = (MOUSE_OUTLINE_POINTS[i + 6][1] + MOUSE_OUTLINE_POINTS[12 - i][1])/2

            AFTER_MOUSE_OUTLINE_POINTS[12-i] = (mid_x - len_x_down, mid_y_down)
            AFTER_MOUSE_OUTLINE_POINTS[6+i] = (mid_x + len_x_down, mid_y_down)

    AFTER_MOUSE_OUTLINE_POINTS[3] = (mid_x, AFTER_MOUSE_OUTLINE_POINTS[3][1])
    AFTER_MOUSE_OUTLINE_POINTS[9] = (mid_x, AFTER_MOUSE_OUTLINE_POINTS[9][1])

    #내부
    for i in range(2):

        len_x = (MOUSE_INLINE_POINTS[4-i][0] - MOUSE_INLINE_POINTS[i][0]) /2
        mid_y = (MOUSE_INLINE_POINTS[4-i][1] + MOUSE_INLINE_POINTS[i][1]) /2

        AFTER_MOUSE_OUTLINE_POINTS[i] = (mid_x - len_x, mid_y)
        AFTER_MOUSE_OUTLINE_POINTS[4-i] = (mid_x + len_x, mid_y)

        if i > 0:
            len_x_down = (MOUSE_OUTLINE_POINTS[i+4][0] - MOUSE_OUTLINE_POINTS[8-i][0]) /2
            mid_y_down = (MOUSE_OUTLINE_POINTS[i + 4][1] + MOUSE_OUTLINE_POINTS[8 - i][1])/2

            AFTER_MOUSE_OUTLINE_POINTS[8-i] = (mid_x - len_x_down, mid_y_down)
            AFTER_MOUSE_OUTLINE_POINTS[4+i] = (mid_x + len_x_down, mid_y_down)

    AFTER_MOUSE_INLINE_POINTS[2] = (mid_x, AFTER_MOUSE_INLINE_POINTS[2][1])
    AFTER_MOUSE_INLINE_POINTS[6] = (mid_x, AFTER_MOUSE_INLINE_POINTS[6][1])




construct()
print_Poly()
print_Point()