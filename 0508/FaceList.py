import cv2
import mediapipe as mp
import bpy

Face_index =\
[(10,109,108),(109,69,108),(67,69,109),(67,104,69),(103,67,104),
(103,104,68),(103,68,54),(54,68,71),(54,71,21),(21,71,139),
(21,139,162),(162,139,34),(34,162,127),(127,34,227),(227,127,234),
(234,227,137),(234,137,93),(93,137,177),(177,93,132),(132,177,58),
(58,177,215),(215,58,172),(172,215,138),(138,172,136),(138,136,135),
(135,136,150),(150,135,169),(150,169,149),(149,169,170),(170,149,140),
(140,149,176),(140,176,171),(171,176,148),(148,171,152),(152,171,175),
(175,152,396),(396,377,152),(377,396,400),(400,396,369),(369,400,378),
(378,369,395),(395,378,394),(394,378,379),(394,379,364),(364,379,365),
(364,365,367),(367,365,397),(397,367,435),(435,397,288),(288,435,401),
(401,288,361),(361,401,323),(323,401,366),(366,323,454),(366,454,447),
(447,454,356),(356,447,264),(264,356,389),(389,264,368),(368,389,251),
(368,251,301),(301,251,284),(284,301,298),(298,284,332),(333,332,298),
(332,297,333),(333,332,297),(297,333,299),(299,297,338),(338,299,337),
(337,338,10),(337,151,10),(10,151,108),(108,151,107),(107,108,66),
(66,108,69),(69,66,105),(105,104,69),(105,104,63),(63,104,68),
(68,63,70),(68,70,71),(71,70,156),(156,71,139),(139,156,143),
(139,143,34),(34,143,116),(116,34,227),(227,116,123),(123,227,137),
(137,123,147),(147,137,177),(147,177,213),(213,177,215),(215,213,192),
(192,215,138),(138,192,135),(135,192,214),(214,135,210),(210,135,169),
(169,210,170),(170,210,211),(211,170,32),(32,170,140),(140,32,208),
(32,140,208),(208,140,171),(171,208,175),(175,208,199),(199,428,175),
(175,396,428),(428,396,369),(369,428,262),(262,369,395),(395,262,431),
(431,395,430),(430,395,394),(394,430,364),(364,430,434),(434,364,416),
(416,364,367),(367,416,435),(435,433,416),(433,435,401),(401,433,376),
(376,401,366),(366,376,352),(366,352,447),(447,345,352),(447,345,264),
(264,345,372),(372,264,368),(368,372,383),(383,301,368),(383,301,300),
(300,301,383),(300,301,298),(298,300,293),(298,293,333),(333,293,334),
(334,333,299),(299,334,296),(296,299,337),(337,296,336),(336,337,151),
(151,336,9),(9,151,107),(107,9,55),(55,107,65),(65,107,66),
(65,66,52),(52,66,105),(105,52,53),(53,63,105),(63,53,46),
(46,63,70),(70,46,124),(124,70,156),(156,124,35),(35,156,143),
(35,143,111),(111,143,116),(116,111,117),(117,116,123),(123,117,50),
(50,123,187),(187,123,147),(147,187,192),(192,147,213),(187,192,207),
(192,207,214),(214,207,216),(216,214,212),(212,214,210),(210,212,202),
(202,210,211),(211,202,204),(204,211,194),(194,211,32),(32,194,201),
(32,201,208),(208,201,200),(200,208,199),(199,200,428),(428,200,421),
(421,428,262),(262,421,418),(418,262,431),(431,418,424),(424,431,422),
(431,422,430),(430,422,432),(432,430,434),(432,434,436),(436,434,427),
(434,427,416),(416,427,411),(411,416,376),(376,433,416),(411,376,352),
(280,411,352),(352,280,346),(346,352,345),(345,346,340),(340,345,372),
(340,372,265),(265,372,383),(383,265,353),(353,383,300),(300,353,276),
(276,300,293),(293,276,283),(283,293,334),(334,283,282),(282,334,296),
(296,282,295),(295,296,336),(336,295,285),(285,336,9),(9,285,8),
(9,8,55),(55,8,193),(193,55,221),(221,55,222),(222,55,65),
(65,222,52),(52,222,223),(223,52,224),(224,52,53),(53,224,225),
(53,46,225),(225,46,113),(113,46,124),(124,113,226),(226,124,35),
(35,226,31),(31,35,111),(31,111,117),(117,31,228),(228,117,118),
(118,117,50),(118,50,101),(101,50,205),(205,50,187),(187,205,207),
(207,205,206),(206,207,216),(216,206,92),(92,216,186),(186,216,212),
(212,57,186),(212,57,43),(43,212,202),(202,43,106),(106,202,204),
(204,106,182),(182,204,194),(194,182,201),(201,182,83),(83,201,200),
(83,200,18),(18,200,313),(313,200,421),(313,421,406),(406,421,418),
(406,418,424),(424,406,335),(335,424,422),(422,335,273),(273,422,432),
(273,432,287),(287,432,410),(410,432,436),(436,410,322),(322,436,426),
(426,436,427),(427,426,425),(425,427,411),(411,425,280),(280,425,330),
(330,280,347),(347,280,346),(346,347,448),(448,346,261),(261,346,340),
(340,261,265),(265,261,446),(446,265,353),(353,446,342),(342,353,276),
(445,342,276),(276,445,283),(283,445,444),(444,283,282),(282,444,443),
(443,442,282),(282,442,295),(295,442,285),(285,442,441),(441,285,417),
(8,417,285),(8,417,168),(168,8,193),(193,168,122),(122,193,245),
(245,193,189),(189,193,221),(221,189,56),(56,221,222),(222,56,28),
(222,223,28),(28,223,27),(27,223,29),(29,223,224),(29,224,30),
(30,224,225),(225,30,247),(247,225,113),(113,247,130),(130,113,226),
(226,130,25),(25,226,31),(31,25,228),(228,25,110),(110,228,229),
(229,228,118),(118,229,119),(118,119,101),(101,119,100),(100,101,36),
(36,101,205),(205,36,206),(206,36,203),(203,206,165),(165,206,92),
(92,165,39),(39,92,40),(40,92,186),(186,40,185),(185,186,57),
(185,57,61),(61,57,146),(146,57,43),(43,146,91),(91,43,106),
(106,91,182),(182,91,181),(181,182,84),(84,182,83),(83,84,18),
(84,17,18),(18,17,314),(314,18,313),(313,314,406),(406,314,405),
(405,406,321),(321,406,335),(335,321,273),(273,321,375),(375,273,287),
(287,375,291),(291,287,409),(409,287,410),(410,409,270),(270,410,322),
(322,270,269),(269,322,391),(391,322,426),(426,391,423),(423,426,266),
(266,426,425),(425,266,330),(330,266,329),(329,330,348),(348,330,347),
(348,347,449),(449,347,448),(448,449,339),(448,339,255),(255,448,261),
(261,255,446),(446,255,359),(359,446,342),(342,359,467),(467,342,445),
(467,445,260),(260,445,444),(444,260,259),(259,444,443),(443,259,257),
(257,258,443),(443,258,442),(442,258,286),(286,442,441),(441,286,413),
(413,441,417,),(417,413,465),(465,417,351),(351,417,168),(168,351,6),
(168,6,122),(122,6,196),(196,122,188),(188,122,245),(245,188,114),
(114,245,128),(128,244,245),(244,245,189),(189,244,190),(190,189,56),
(56,190,157),(157,56,158),(158,56,28),(28,158,159),(159,28,27),
(27,159,29),(159,29,160),(29,30,160),(160,30,161),(161,30,247),
(247,246,161),(246,247,33),(33,247,130),(130,33,25),(33,25,7),
(7,33,246),(246,7,163),(163,246,161),(161,163,144),(144,161,160),
(160,144,145),(145,160,159),(159,145,153),(153,159,158),(158,153,154),
(158,154,157),(157,154,155),(155,157,173),(173,155,133),(157,173,190),
(190,173,243),(173,133,243),(243,190,244),(244,243,233),(233,243,112),
(244,233,128),(133,243,112),(155,133,112),(112,155,26),(26,154,155),
(26,22,154),(154,153,22),(22,153,23),(153,23,145),(145,23,144),
(144,23,24),(24,144,110),(110,144,163),(163,7,110),(110,7,25),
(110,24,229),(229,24,230),(230,24,23),(23,230,231),(23,231,22),
(22,231,232),(232,22,26),(26,232,112),(232,112,233),(233,232,128),
(232,128,121),(121,232,231),(231,121,120),(120,231,230),(230,120,119),
(229,230,119),(119,120,100),(100,120,47),(47,120,121),(121,47,114),
(121,114,128),(188,196,174),(174,188,114),(114,174,217),(217,47,114),
(47,217,126),(126,47,100),(100,126,142),(142,100,36),(36,142,129),
(129,142,209),(209,142,126),(126,209,198),(198,126,217),(217,198,174),
(174,236,198),(196,236,3),(3,196,197),(197,3,195),(197,196,6),
(174,196,236),(3,195,51),(236,3,51),(51,236,134),(134,236,198),
(198,134,131),(131,198,49),(49,198,209),(49,209,129),(129,49,102),
(102,49,48),(48,102,64),(64,102,129),(49,48,131),(131,48,115),

(115,131,220),(220,131,134),(134,220,45),(45,134,51),(51,5,45),
(51,5,195),(5,4,45),(4,45,1),(1,45,44),(44,45,220),
(220,44,237),(237,218,220),(220,218,115),(115,218,219),(219,115,48),
(48,219,64),(64,219,235),(64,235,240),(240,64,98),(98,64,129),
(129,98,203),(203,98,165),(165,167,98),(98,97,240),(98,240,97),
(97,99,240),(240,99,75),(75,240,235),(75,59,235),(235,59,219),
(36,129,203)]

RemoveEdge_list =[]

def delete_all_object():
    bpy.ops.object.select_all(action='SELECT')
    bpy.ops.object.delete()
def export_bpy(filename):
    bpy.ops.export_scene.fbx(filepath="3D/"+filename+".fbx")
    bpy.ops.wm.save_as_mainfile(filepath="3D/"+filename+".blend")

def create_plane(list, object_name):
    bpy.ops.mesh.primitive_circle_add(vertices=len(list), radius=0.1, enter_editmode=False, location=(0, 0, 1))
    obj = bpy.data.objects[0]
    obj.name = object_name
    vertex_list = [(obj.matrix_world @ v.co) for v in obj.data.vertices]

    obj = bpy.data.objects[object_name]
    # select vertex
    obj = bpy.context.active_object

    for i in range(len(list)):
        bpy.ops.object.mode_set(mode='EDIT')
        bpy.ops.mesh.select_mode(type="VERT")
        bpy.ops.mesh.select_all(action='DESELECT')
        bpy.ops.object.mode_set(mode='OBJECT')

        obj.data.vertices[i].select = True

        bpy.ops.object.mode_set(mode='EDIT')
        diff_x = list[i][0] - vertex_list[i][0]
        diff_y = list[i][1] - vertex_list[i][1]
        diff_z = list[i][2] - vertex_list[i][2]

        bpy.ops.transform.translate(value=(diff_x, diff_y, diff_z))
    bpy.ops.object.mode_set(mode='OBJECT')

def create_Face(list, object_name):
    obj = bpy.data.objects[object_name]
    # select vertex
    obj = bpy.context.active_object

    for i in list:
        bpy.ops.object.mode_set(mode='EDIT')
        bpy.ops.mesh.select_mode(type="VERT")
        bpy.ops.mesh.select_all(action='DESELECT')
        bpy.ops.object.mode_set(mode='OBJECT')

        obj.data.vertices[i[0]].select = True
        obj.data.vertices[i[1]].select = True
        obj.data.vertices[i[2]].select = True

        bpy.ops.object.mode_set(mode='EDIT')
        bpy.ops.mesh.edge_face_add()

    bpy.ops.object.mode_set(mode='OBJECT')
def remove_Edge(list, object_name):
    obj = bpy.data.objects[object_name]
    # select vertex
    obj = bpy.context.active_object

    for i in list:
        bpy.ops.object.mode_set(mode='EDIT')
        bpy.ops.mesh.select_mode(type='EDGE')
        bpy.ops.mesh.select_all(action='DESELECT')
        bpy.ops.object.mode_set(mode='OBJECT')

        obj.data.vertices[i].select = True

        bpy.ops.object.mode_set(mode='EDIT')
        bpy.ops.mesh.delete(type='EDGE')

    bpy.ops.object.mode_set(mode='OBJECT')

def create_landmarks_list(landmarks_index):
    list =[]
    for facial_landmarks in result.multi_face_landmarks:

        for i in landmarks_index:
            pt1 = facial_landmarks.landmark[i]
            list.append((pt1.x, pt1.y, pt1.z))

    return list

def create_landmarks_list():
    list =[]
    for facial_landmarks in result.multi_face_landmarks:

        for i in range(468):
            pt1 = facial_landmarks.landmark[i]
            list.append((pt1.x, pt1.y, pt1.z))

    return list
def create_remove_Edge_list(Face_list):
    list =[]
    return list
def move_origin_center():
    bpy.ops.object.origin_set(type='ORIGIN_CENTER_OF_VOLUME', center='MEDIAN')
    bpy.context.object.location = (0, 0, 0)
    bpy.context.object.rotation_euler[0] = 1.5708
    bpy.context.object.rotation_euler[1] = 1.5708 * 2
    bpy.context.object.rotation_euler[2] = 1.5708 * 2

#Face Mesh
mp_face_mesh = mp.solutions.face_mesh
face_mesh = mp_face_mesh.FaceMesh()

image = cv2.imread('../img/hyunbin.png')
# image = cv2.imread('../img/jungmin.png')
# image = cv2.imread('../img/sangsoo.png')
# image = cv2.imread('../img/sukhun.png')
# image = cv2.imread('../img/actor.jpg')
rgb_image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

result = face_mesh.process(rgb_image)
height, width, _ = image.shape


if __name__ == '__main__':
    delete_all_object()
    temp_point = create_landmarks_list()

    create_plane(temp_point,"aa")
    create_Face(Face_index,"aa")

    move_origin_center()

    export_bpy('new')